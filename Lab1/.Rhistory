mutate(
"npdes_ids" = str_extract_all(`other_known_ids`, all_patterns),
"npdes_ids" = sapply(npdes_ids,paste,collapse = ";")) %>%
mutate(facility_p_type = ifelse(
str_detect(other_known_ids, npdes_pattern) & str_detect(other_known_ids, individual_pattern) & str_detect(other_known_ids, gp_pattern), "multi",
ifelse(
str_detect(other_known_ids, npdes_pattern) & str_detect(other_known_ids, individual_pattern) | str_detect(other_known_ids, npdes_pattern) & str_detect(other_known_ids, gp_pattern) | str_detect(other_known_ids, individual_pattern) & str_detect(other_known_ids, gp_pattern), "multi",
ifelse( str_detect(other_known_ids, npdes_pattern), "npdes",
ifelse( str_detect(other_known_ids, individual_pattern), "individual", ifelse(
str_detect(other_known_ids, gp_pattern), "gp",
"NA"
)
)
)
)
)
)
# pivoting wider so each permit action has a column for each ID detected
universe_v2 <- universe %>%
separate_wider_delim(npdes_ids, delim = ";", names_sep = "_", too_few = "align_start")
# grouping by application ID to filter for the most recent action only
# JD: when JD does this, he would create a new column for the latest ID and check if the current date for the action equals the latest date (i.e., if date_received = latest_date)
universe_v3 <- universe_v2 %>%
group_by(`application_id`) %>%
slice(which.max(as.Date(date_received, '%m/%d/%Y')))
# excluding status that do not need to be included. Do we want to include expired permits?
exclude_status <- c("Discontinued", "Denied", "Withdrawn by Applicant", "Withdrawn for Incompleteness", "No Jurisdiction", "Incomplete", "Revoke Permit")
# pivoting longer so that there is a row for every detected ID
universe_v4 <- universe_v3 %>%
pivot_longer(
cols = matches("npdes_ids*")
) %>%
arrange(application_id, name) %>%
filter(`value` != "NA",
`facility_p_type` != "individual",
!str_detect(`value`, individual_pattern),
`status` %!in% exclude_status) %>%
rename("npdes_id" = "value") %>%
ungroup() %>%
mutate(`In_ICIS` = if_else(universe_v4$`npdes_id` %in% icis$`npdes_id`,
'Y', 'N'))
# pivoting longer so that there is a row for every detected ID
universe_v4 <- universe_v3 %>%
pivot_longer(
cols = matches("npdes_ids*")
) %>%
arrange(application_id, name) %>%
filter(`value` != "NA",
`facility_p_type` != "individual",
!str_detect(`value`, individual_pattern),
`status` %!in% exclude_status) %>%
rename("npdes_id" = "value") %>%
ungroup() %>%
mutate(`In_ICIS` = if_else(universe_v4$`npdes_id` %in% icis$`npdes_id`,
'Y', 'N'))
universe_v4 <- universe_v4 %>%
mutate(`In_ICIS` = if_else(universe_v3$`npdes_id` %in% icis$`npdes_id`,
'Y', 'N'))
# pivoting longer so that there is a row for every detected ID
universe_v4 <- universe_v3 %>%
pivot_longer(
cols = matches("npdes_ids*")
) %>%
arrange(application_id, name) %>%
filter(`value` != "NA",
`facility_p_type` != "individual",
!str_detect(`value`, individual_pattern),
`status` %!in% exclude_status) %>%
rename("npdes_id" = "value") %>%
ungroup()
universe_v4 <- universe_v4 %>%
mutate(`In_ICIS` = if_else(universe_v3$`npdes_id` %in% icis$`npdes_id`,
'Y', 'N'))
universe_v4 <- universe_v4 %>%
mutate(`In_ICIS` = if_else(universe_v4$`npdes_id` %in% icis$`npdes_id`,
'Y', 'N'))
# checking for duplicate entries
duplicates <- universe_v4 %>%
filter(duplicated(`npdes_id`)) %>%
group_by(`npdes_id`)
# check to see if the ID column is NA - that means it has the permit type but we couldn't identify permit IDs.
na <- universe_v4 %>%
filter(is.na(`npdes_id`))
universe_v3 <- universe_v2 %>%
group_by(`application_id`) %>%
slice(which.max(as.Date(date_received, '%m/%d/%Y')))
# excluding status that do not need to be included. Do we want to include expired permits?
exclude_status <- c("Discontinued", "Denied", "Withdrawn by Applicant", "Withdrawn for Incompleteness", "No Jurisdiction", "Incomplete", "Revoke Permit")
# pivoting longer so that there is a row for every detected ID
universe_v4 <- universe_v3 %>%
pivot_longer(
cols = matches("npdes_ids*")
) %>%
arrange(application_id, name) %>%
filter(`value` != "NA",
`facility_p_type` != "individual",
!str_detect(`value`, individual_pattern),
`status` %!in% exclude_status) %>%
rename("npdes_id" = "value") %>%
ungroup()
universe_v4 <- universe_v4 %>%
mutate(`In_ICIS` = if_else(universe_v4$`npdes_id` %in% icis$`npdes_id`,
'Y', 'N'))
# checking for duplicate entries
duplicates <- universe_v4 %>%
filter(duplicated(`npdes_id`)) %>%
group_by(`npdes_id`)
View(duplicates)
universe_v3 <- universe_v2 %>%
group_by(`application_id`) %>%
slice(which.max(as.Date(date_received, '%m/%d/%Y')))
# excluding status that do not need to be included. Do we want to include expired permits?
exclude_status <- c("Discontinued", "Denied", "Withdrawn by Applicant", "Withdrawn for Incompleteness", "No Jurisdiction", "Incomplete", "Revoke Permit")
# pivoting longer so that there is a row for every detected ID
universe_v4 <- universe_v3 %>%
pivot_longer(
cols = matches("npdes_ids*")
) %>%
arrange(application_id, name) %>%
filter(`value` != "NA",
`facility_p_type` != "individual",
!str_detect(`value`, individual_pattern),
`status` %!in% exclude_status) %>%
rename("npdes_id" = "value")
universe_v4 <- universe_v4 %>%
mutate(`In_ICIS` = if_else(universe_v4$`npdes_id` %in% icis$`npdes_id`,
'Y', 'N'))
# checking for duplicate entries
duplicates <- universe_v4 %>%
filter(duplicated(`npdes_id`)) %>%
group_by(`npdes_id`)
View(duplicates)
# check to see if the ID column is NA - that means it has the permit type but we couldn't identify permit IDs.
na <- universe_v4 %>%
filter(is.na(`npdes_id`))
# checking # of icis spdes IDs and dart IDs
icis_spdes <- icis$`npdes_id`
dart_spdes <- universe_v4$`npdes_id`
# check to make sure anti-join below equals number returned in line 88.
n_icis_check <- dart_spdes %!in% icis_spdes
length(n_icis_check[n_icis_check==TRUE])
# completing list of permits in NYSDEC DART that are NOT in ICIS.
n_icis <- universe_v4 %>%
anti_join(icis, by = "npdes_id") %>%
group_by(`npdes_id`)
View(dart)
unique(dart$application_type)
# load libraries
library(RSocrata)
library(tidyverse)
library(readr)
library(readxl)
library(janitor)
dart <- read.socrata("https://data.ny.gov/resource/mbk7-f2r2.json")
# loading NY facility data from EPA ICIS
icis <- read_csv("C:/Users/AGURKAS/OneDrive - Environmental Protection Agency (EPA)/Profile/Documents/NPDES/NPDES Permit Tracking/IcisNpdes_8_16_2024.csv") %>%
rename("npdes_id" = "NPDES ID")
#creating a not in function
'%!in%' <- function(x,y)!('%in%'(x,y))
# p_type = permit type. note: we are not including stormwater discharge or groundwater discharge in this analysis
p_type <- c("P/C/I SPDES - Surface Discharge","Municipal SPDES - Surface Discharge","Industrial SPDES - Surface Discharge")
# a_type = application type. note: need to review a_type with team****
a_type <- c("DIM Treat as New", "Renewal Treat as New", "Department Initiated Modification", "Modification Treat as New")
#d_type = discharge classification
d_type <- c("02", "04")
# defining the regex patterns for the IDs we want to track
npdes_pattern <- "NY\\d{7}"
gp_pattern <- "GP\\d{7}"
individual_pattern <- "NY[A-Z]\\d{2}[A-Z]\\d{3}"
all_patterns <- paste(npdes_pattern,gp_pattern,individual_pattern, sep="|")
universe <- dart %>%
filter(
`permit_type` %in% p_type,
str_detect(`other_known_ids`, npdes_pattern) |
str_detect(`other_known_ids`, gp_pattern) |
str_detect(`other_known_ids`, individual_pattern)) %>%
mutate(
"npdes_ids" = str_extract_all(`other_known_ids`, all_patterns),
"npdes_ids" = sapply(npdes_ids,paste,collapse = ";")) %>%
mutate(facility_p_type = ifelse(
str_detect(other_known_ids, npdes_pattern) & str_detect(other_known_ids, individual_pattern) & str_detect(other_known_ids, gp_pattern), "multi",
ifelse(
str_detect(other_known_ids, npdes_pattern) & str_detect(other_known_ids, individual_pattern) | str_detect(other_known_ids, npdes_pattern) & str_detect(other_known_ids, gp_pattern) | str_detect(other_known_ids, individual_pattern) & str_detect(other_known_ids, gp_pattern), "multi",
ifelse( str_detect(other_known_ids, npdes_pattern), "npdes",
ifelse( str_detect(other_known_ids, individual_pattern), "individual", ifelse(
str_detect(other_known_ids, gp_pattern), "gp",
"NA"
)
)
)
)
)
)
# pivoting wider so each permit action has a column for each ID detected
universe_v2 <- universe %>%
separate_wider_delim(npdes_ids, delim = ";", names_sep = "_", too_few = "align_start")
# grouping by application ID to filter for the most recent action only
# JD: when JD does this, he would create a new column for the latest ID and check if the current date for the action equals the latest date (i.e., if date_received = latest_date)
universe_v3 <- universe_v2 %>%
group_by(`application_id`) %>%
slice(which.max(as.Date(date_received, '%m/%d/%Y')))
# excluding status that do not need to be included. Do we want to include expired permits?
exclude_status <- c("Discontinued", "Denied", "Withdrawn by Applicant", "Withdrawn for Incompleteness", "No Jurisdiction", "Incomplete", "Revoke Permit")
# pivoting longer so that there is a row for every detected ID
universe_v4 <- universe_v3 %>%
pivot_longer(
cols = matches("npdes_ids*")
) %>%
arrange(application_id, name) %>%
filter(`value` != "NA",
`facility_p_type` != "individual",
!str_detect(`value`, individual_pattern),
`status` %!in% exclude_status) %>%
rename("npdes_id" = "value")
# checking for duplicate entries
duplicates <- universe_v4 %>%
filter(duplicated(`npdes_id`)) %>%
group_by(`npdes_id`)
# check to see if the ID column is NA - that means it has the permit type but we couldn't identify permit IDs.
na <- universe_v4 %>%
filter(is.na(`npdes_id`))
# checking # of icis spdes IDs and dart IDs
icis_spdes <- icis$`npdes_id`
dart_spdes <- universe_v4$`npdes_id`
# identifying list of permits that have been admin renewed
admin_renew <- universe_v4 %>%
filter(grepl("Treat as New",`application_type`)) %>%
filter(status == "Issued") %>%
filter(grepl("Fast Track", `short_description`))
# check to make sure anti-join below equals number returned in line 88.
n_icis_check <- dart_spdes %!in% icis_spdes
length(n_icis_check[n_icis_check==TRUE])
# completing list of permits in NYSDEC DART that are NOT in ICIS.
n_icis <- universe_v4 %>%
anti_join(icis, by = "npdes_id") %>%
group_by(`npdes_id`)
unique(icis$`Permit Status`)
universe_v5 <- icis %>%
full_join(universe_v4, by = "npdes_id") %>%
distinct(npdes_id, .keep_all = TRUE)
output_1 <- n_icis %>%
select(`npdes_id`, everything(),-`name`,-`facility_p_type`) %>%
clean_names(case = "title") %>%
rename(
"NPDES ID" = "Npdes Id",
"NYSDEC Application ID" = "Application Id")
View(universe_v2)
View(universe_v2)
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(openintro)
library(DATA606)
setwd("C:/Users/AGURKAS/OneDrive - Environmental Protection Agency (EPA)/Profile/Documents/Masters Program/CUNY/Statistics/Lab1")
# Chunk 1: global_options
# how to load the lab Rmds
# library(DATA606)
#
# getLabs()
# startLab("Lab1", dest_dir = getwd())
setwd("C:/Users/AGURKAS/OneDrive - Environmental Protection Agency (EPA)/Profile/Documents/Masters Program/CUNY/Statistics/Lab1")
# Chunk 2: global_options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(openintro)
library(DATA606)
# Chunk 3: r-interface-2020
knitr::include_graphics("img/r-interface-2020.png")
# Chunk 5: load-packages
library(tidyverse)
library(openintro)
# Chunk 6: load-abrbuthnot-data
data('arbuthnot', package='openintro')
# Chunk 7: view-data
arbuthnot
# Chunk 8: glimpse-data
glimpse(arbuthnot)
# Chunk 9: glimpse-data-result
glimpse(arbuthnot)
# Chunk 10: view-boys
arbuthnot$boys
# Chunk 11: exercise-1-response
# answer 1
arbuthnot$girls
# Chunk 12: plot-girls-vs-year
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
# Chunk 13: plot-girls-vs-year-line
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_line()
# Chunk 15: exercise-2-response
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_line()
# Chunk 16: calc-total-bapt-numbers
5218 + 4683
# Chunk 17: calc-total-bapt-vars
arbuthnot$boys + arbuthnot$girls
# Chunk 18: calc-total-bapt-vars-save
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
# Chunk 19: plot-total-vs-year
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
# Chunk 20: calc-prop-boys-to-girls-numbers
5218 / 4683
# Chunk 21: calc-prop-boys-to-girls-vars
arbuthnot <- arbuthnot %>%
mutate(boy_to_girl_ratio = boys / girls)
# Chunk 22: calc-prop-boys-numbers
5218 / (5218 + 4683)
# Chunk 23: calc-prop-boys-vars
arbuthnot <- arbuthnot %>%
mutate(boy_ratio = boys / total)
# Chunk 24: exercise-3-response
ggplot(data = arbuthnot, aes(x = year, y = boy_ratio)) +
geom_line()
# This is a line graph, and it is relatively a higher ratio of boys born than girls born over time. However, it is decreasing over time.
# Chunk 25: boys-more-than-girls
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
# Chunk 26
data('present', package='openintro')
# Chunk 27: summarize min and max
arbuthnot %>%
summarize(min = min(boys), max = max(boys))
print(range(present$year))
# years 1940-2002 are in the present dataset
# years 1629-1710 are in the arbuthnot dataset
print(dim(present))
# there are 63 rows and 3 columns in the present dataset
# there were originally 82 rows and 3 columns in the arbuthnot dataset but we added three columns ('total', 'boy_to_girl_ratio', 'boy_ratio')
print(colnames(present))
# The column names in the present dataset are 'year', 'boys' and 'girls'.
present <- present %>%
mutate(boy_to_girl_ratio = boys / girls)
View(present)
View(arbuthnot)
present <- present %>%
mutate(boy_to_girl_ratio = boys / girls)
present <- present %>%
mutate(boy_ratio = boys / total)
present <- present %>%
mutate(total = boys + girls)%>%
mutate(boy_ratio = boys / total)
ggplot(data = present, aes(x = year, y = boy_ratio)) +
geom_line()
View(present)
?rbind()
joined_datasets <- rbind(present,arbuthnot)
View(present)
View(arbuthnot)
arbuthnot <- arbuthnot %>%
select(-more_boys)
joined_datasets <- rbind(present,arbuthnot)
View(joined_datasets)
joined_datasets <- rbind(present,arbuthnot) %>%
sort(year, decreasing=FALSE)
joined_datasets <- rbind(present,arbuthnot) %>%
sort(year)
joined_datasets <- rbind(present,arbuthnot)
joined_datasets < joined_datasets %>%
sort(year)
joined_datasets < joined_datasets %>%
sort(year, cecreasing=FALSE)
joined_datasets <- rbind(present,arbuthnot) %>%
order(`year`)
joined_datasets <- joined_datasets %>%
order(year)
?order
joined_datasets <- joined_datasets %>%
order(year, decreasing=FALSE)
View(joined_datasets)
joined_datasets <- joined_datasets %>%
arrange(desc(total))
joined_datasets <- rbind(present,arbuthnot) %>%
arrange(desc(total))
View(joined_datasets)
joined_datasets <- joined_datasets %>%
arrange(desc(total))
View(joined_datasets)
class(joined_datasets$year)
?desc()
joined_datasets <- rbind(present,arbuthnot) %>%
arrange(desc(total))
View(joined_datasets)
joined_datasets <- rbind(present,arbuthnot)
joined_datasets <- joined_datasets %>%
arrange(desc(total))
View(joined_datasets)
View(joined_datasets)
print(summarize(max = max(total)))
print(summarize(max = max(joined_datasets$total)))
print(summarize((joined_datasets$total)))
print(max(joined_datasets$total)
print(max(joined_datasets$total)
print(max(joined_datasets$total))
View(joined_datasets)
max_total <- joined_datasets %>%
arrange(desc(total)) %>%
head(1)
max_total <- joined_datasets %>%
arrange(desc(total)) %>%
head(1) %>%
print()
joined_datasets %>%
arrange(desc(total)) %>%
print(1)
joined_datasets %>%
arrange(desc(total)) %>%
print(n=1)
present %>%
arrange(desc(total)) %>%
print(n=1)
arbuthnot %>%
arrange(desc(total)) %>%
print(n=1)
# Chunk 1: load-lab-ex-code
# how to load the lab Rmds - for future reference
# library(DATA606)
# getLabs()
# startLab("Lab1", dest_dir = getwd())
# setwd("C:/Users/AGURKAS/OneDrive - Environmental Protection Agency (EPA)/Profile/Documents/Masters Program/CUNY/Statistics/Lab1")
# Chunk 2: global_options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(openintro)
library(DATA606)
# Chunk 3: r-interface-2020
knitr::include_graphics("img/r-interface-2020.png")
# Chunk 5: load-packages
library(tidyverse)
library(openintro)
# Chunk 6: load-abrbuthnot-data
data('arbuthnot', package='openintro')
# Chunk 7: view-data
arbuthnot
# Chunk 8: glimpse-data
glimpse(arbuthnot)
# Chunk 9: glimpse-data-result
glimpse(arbuthnot)
# Chunk 10: view-boys
arbuthnot$boys
# Chunk 11: exercise-1-response
# answer 1
arbuthnot$girls
# Chunk 12: plot-girls-vs-year
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
# Chunk 13: plot-girls-vs-year-line
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_line()
# Chunk 15: exercise-2-response
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_line()
# Chunk 16: calc-total-bapt-numbers
5218 + 4683
# Chunk 17: calc-total-bapt-vars
arbuthnot$boys + arbuthnot$girls
# Chunk 18: calc-total-bapt-vars-save
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
# Chunk 19: plot-total-vs-year
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
# Chunk 20: calc-prop-boys-to-girls-numbers
5218 / 4683
# Chunk 21: calc-prop-boys-to-girls-vars
arbuthnot <- arbuthnot %>%
mutate(boy_to_girl_ratio = boys / girls)
# Chunk 22: calc-prop-boys-numbers
5218 / (5218 + 4683)
# Chunk 23: calc-prop-boys-vars
arbuthnot <- arbuthnot %>%
mutate(boy_ratio = boys / total)
# Chunk 24: exercise-3-response
ggplot(data = arbuthnot, aes(x = year, y = boy_ratio)) +
geom_line()
# Chunk 25: boys-more-than-girls
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
# Chunk 26
data('present', package='openintro')
# Chunk 27: summarize min and max
arbuthnot %>%
summarize(min = min(boys), max = max(boys))
# Chunk 28: exercise-4-response
print(range(present$year))
# years 1940-2002 are in the present dataset
# years 1629-1710 are in the arbuthnot dataset
print(dim(present))
# there are 63 rows and 3 columns in the present dataset
# there were originally 82 rows and 3 columns in the arbuthnot dataset but we added three columns ('total', 'boy_to_girl_ratio', 'boy_ratio')
print(colnames(present))
# The column names in the present dataset are 'year', 'boys' and 'girls'.
# Chunk 29: exercise-6-response
present <- present %>%
mutate(total = boys + girls)%>%
mutate(boy_ratio = boys / total)
ggplot(data = present, aes(x = year, y = boy_ratio)) +
geom_line()
View(present)
View(arbuthnot)
View(present)
View(present)
View(arbuthnot)
# finding the year with the most total number of births in the U.S.
arbuthnot <- arbuthnot %>%
select(-more_boys,-boy_to_girl_ratio)
joined_datasets <- rbind(present,arbuthnot)
joined_datasets %>%
arrange(desc(total)) %>%
print(n=1)
?present()
